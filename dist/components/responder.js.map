{"version":3,"sources":["../../src/components/responder.js"],"names":["axon","require","portfinder","Configurable","Component","colors","module","exports","Responder","constructor","advertisement","discoveryOptions","sock","types","type","on","startDiscovery","req","cb","listeners","length","logUnknownEvents","discovery","log","name","yellow","emit","onPort","err","port","bind","server","code","getPort","host","address","listener","args","rv","then","pop","val","catch","oppo"],"mappings":"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","sourcesContent":["const axon = require('@dashersw/axon');\nconst portfinder = require('portfinder');\nconst Configurable = require('./configurable');\nconst Component = require('./component');\n\n// eslint-disable-next-line\nconst colors = require('colors');\n\nmodule.exports = class Responder extends Configurable(Component) {\n    constructor(advertisement, discoveryOptions) {\n        super(advertisement, discoveryOptions);\n\n        this.sock = new axon.types[this.type]();\n        this.sock.on('bind', () => this.startDiscovery());\n\n        this.sock.on('message', (req, cb) => {\n            if (!req.type) return;\n\n            if (this.listeners(req.type).length === 0 && this.discoveryOptions.logUnknownEvents) {\n                this.discovery.log([this.advertisement.name, '>', `No listeners found for event: ${req.type}`.yellow]);\n            }\n\n            this.emit(req.type, req, cb);\n        });\n\n        const onPort = (err, port) => {\n            this.advertisement.port = +port;\n\n            this.sock.bind(port);\n            this.sock.server.on('error', (err) => {\n                if (err.code != 'EADDRINUSE') throw err;\n\n                portfinder.getPort({\n                    host: this.discoveryOptions.address,\n                    port: this.advertisement.port,\n                }, onPort);\n            });\n        };\n\n        portfinder.getPort({\n            host: this.discoveryOptions.address,\n            port: advertisement.port,\n        }, onPort);\n    }\n\n    on(type, listener) {\n        super.on(type, (...args) => {\n            const rv = listener(...args);\n\n            if (rv && typeof rv.then == 'function') {\n                const cb = args.pop();\n                rv.then((val) => cb(null, val)).catch(cb);\n            }\n        });\n    }\n\n    get type() {\n        return 'rep';\n    }\n\n    get oppo() {\n        return 'req';\n    }\n};\n"],"file":"responder.js"}