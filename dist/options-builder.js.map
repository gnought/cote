{"version":3,"sources":["../src/options-builder.js"],"names":["parser","bool","v","toLowerCase","int","parseInt","str","exists","defaultOptions","environment","useHostNames","broadcast","multicast","logUnknownEvents","envVarOptionsMap","COTE_ENV","COTE_USE_HOST_NAMES","COTE_MULTICAST_ADDRESS","COTE_CHECK_INTERVAL","COTE_HELLO_INTERVAL","COTE_HELLO_LOGS_ENABLED","COTE_STATUS_LOGS_ENABLED","COTE_LOG","COTE_LOG_UNKNOWN_EVENTS","COTE_NODE_TIMEOUT","COTE_IGNORE_PROCESS","module","exports","options","environmentSettings","Object","entries","forEach","envVar","setting","process","env","value","COTE_BROADCAST_ADDRESS","DOCKERCLOUD_IP_ADDRESS","keys","filter","k","slice","keyName","keyArray","split","map","pluginName","shift","pluginObj","toUpperCase"],"mappings":"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","sourcesContent":["const parser = {\n    bool: (v) => v.toLowerCase() == 'true', // node always converts process.env values to string, so no need to check\n    // for type: https://nodejs.org/api/process.html#process_process_env\n    int: (v) => parseInt(v, 10), // see above for skipping type checks\n    str: (v) => v,\n    exists: (v) => !!v,\n};\n\nconst defaultOptions = {\n    environment: '',\n    useHostNames: false,\n    broadcast: null,\n    multicast: null,\n    logUnknownEvents: true,\n};\n\nconst envVarOptionsMap = {\n    COTE_ENV: ['environment', parser.str],\n    COTE_USE_HOST_NAMES: ['useHostNames', parser.exists],\n    COTE_MULTICAST_ADDRESS: ['multicast', parser.str],\n    COTE_CHECK_INTERVAL: ['checkInterval', parser.int],\n    COTE_HELLO_INTERVAL: ['helloInterval', parser.int],\n    COTE_HELLO_LOGS_ENABLED: ['helloLogsEnabled', parser.bool],\n    COTE_STATUS_LOGS_ENABLED: ['statusLogsEnabled', parser.bool],\n    COTE_LOG: ['log', parser.bool],\n    COTE_LOG_UNKNOWN_EVENTS: ['logUnknownEvents', parser.bool],\n    COTE_NODE_TIMEOUT: ['nodeTimeout', parser.int],\n    COTE_IGNORE_PROCESS: ['ignoreProcess', parser.bool],\n};\n\nmodule.exports = (options) => {\n    const environmentSettings = {};\n\n    Object.entries(envVarOptionsMap).forEach(([envVar, [setting, parser]]) => {\n        if (!(envVar in process.env)) return;\n\n        const value = process.env[envVar];\n\n        environmentSettings[setting] = parser(value);\n    });\n\n    if (!process.env.COTE_BROADCAST_ADDRESS && process.env.DOCKERCLOUD_IP_ADDRESS) {\n        environmentSettings.broadcast = '10.7.255.255';\n    }\n\n    const keys = Object.keys(process.env).filter((k) => k.slice(0, 15) == 'COTE_DISCOVERY_');\n\n    keys.forEach((k) => {\n        const keyName = k.slice(15);\n        const keyArray = keyName.split('_').map((k) => k.toLowerCase());\n        const pluginName = keyArray.shift();\n\n        const pluginObj = environmentSettings[pluginName] = environmentSettings[pluginName] || {};\n\n        keyArray.forEach((k) => {\n            pluginObj[k] = process.env[`COTE_DISCOVERY_${pluginName.toUpperCase()}_${k.toUpperCase()}`];\n        });\n\n        // Discovery plugins (such as redis) may not have access to real IP addresses.\n        // Therefore we automatically default to `true` for `COTE_USE_HOST_NAMES`,\n        // since host names are accurate.\n        environmentSettings.useHostNames = true;\n    });\n\n    return { ...defaultOptions, ...environmentSettings, ...options };\n};\n"],"file":"options-builder.js"}